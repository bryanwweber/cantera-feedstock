From bfc17981c63bb271df7351b7027ac76e1e3887f7 Mon Sep 17 00:00:00 2001
From: Bryan Weber <bryan.w.weber@gmail.com>
Date: Mon, 2 May 2022 18:27:03 -0500
Subject: [PATCH] Fix cross-compiling for v2.6.0

Cross compiling support is only available without TryRun
---
 SConstruct | 65 ++----------------------------------------------------
 1 file changed, 2 insertions(+), 63 deletions(-)

diff --git a/SConstruct b/SConstruct
index c21b2fc14..d55f20fb0 100644
--- a/SConstruct
+++ b/SConstruct
@@ -1070,24 +1070,6 @@ def get_expression_value(includes, expression, defines=()):
               '}\n'))
     return '\n'.join(s)
 
-# Check that libraries link correctly
-cmath_check_source = get_expression_value(["<cmath>"], "cos(0. * argc)")
-retcode, cmath_works = conf.TryRun(cmath_check_source, ".cpp")
-if cmath_works.strip() != "1":
-    config_error(
-        "The C++ compiler is not correctly configured (failed at linking stage)."
-    )
-
-# Check that NaN is treated correctly
-nan_check_source = get_expression_value(["<cmath>"], "std::isnan(NAN + argc)")
-retcode, nan_works = conf.TryRun(nan_check_source, ".cpp")
-if nan_works.strip() != "1":
-    config_error(
-        "Cantera requires a working implementation of 'std::isnan'.\n"
-        "If you have specified '-ffast-math' or equivalent as an optimization option,\n"
-        "either remove this option or add the '-fno-finite-math-only option'."
-    )
-
 # Check for fmt library and checkout submodule if needed
 # Test for 'ostream.h' to ensure that version >= 3.0.0 is available
 if env['system_fmt'] in ('y', 'default'):
@@ -1116,18 +1098,6 @@ if env['system_fmt'] in ('n', 'default'):
                          'Try manually checking out the submodule with:\n\n'
                          '    git submodule update --init --recursive ext/fmt\n')
 
-fmt_include = '<fmt/format.h>' if env['system_fmt'] else '"../ext/fmt/include/fmt/format.h"'
-fmt_version_source = get_expression_value([fmt_include], 'FMT_VERSION', ['FMT_HEADER_ONLY'])
-retcode, fmt_lib_version = conf.TryRun(fmt_version_source, '.cpp')
-try:
-    fmt_lib_version = divmod(float(fmt_lib_version.strip()), 10000)
-    (fmt_maj, (fmt_min, fmt_pat)) = fmt_lib_version[0], divmod(fmt_lib_version[1], 100)
-    env['FMT_VERSION'] = '{major:.0f}.{minor:.0f}.{patch:.0f}'.format(major=fmt_maj, minor=fmt_min, patch=fmt_pat)
-    print('INFO: Found fmt version {}'.format(env['FMT_VERSION']))
-except ValueError:
-    env['FMT_VERSION'] = '0.0.0'
-    print('INFO: Could not find version of fmt')
-
 # Check for yaml-cpp library and checkout submodule if needed
 if env['system_yamlcpp'] in ('y', 'default'):
     # We need the Mark() function, which was added in version 0.5.3
@@ -1223,12 +1193,6 @@ if env["system_eigen"] in ("n", "default"):
                          "    git submodule update --init --recursive ext/eigen\n")
     eigen_include = "'../ext/eigen/Eigen/Core'"
 
-eigen_versions = 'QUOTE(EIGEN_WORLD_VERSION) "." QUOTE(EIGEN_MAJOR_VERSION) "." QUOTE(EIGEN_MINOR_VERSION)'
-eigen_version_source = get_expression_value([eigen_include], eigen_versions)
-retcode, eigen_lib_version = conf.TryRun(eigen_version_source, ".cpp")
-env["EIGEN_LIB_VERSION"] = eigen_lib_version.strip()
-print("INFO: Found Eigen version {}".format(env["EIGEN_LIB_VERSION"]))
-
 # Determine which standard library to link to when using Fortran to
 # compile code that links to Cantera
 if conf.CheckDeclaration('__GLIBCXX__', '#include <iostream>', 'C++'):
@@ -1250,15 +1214,6 @@ if not env["using_apple_clang"]:
 else:
     env["HAS_OPENMP"] = False
     logger.info("Not checking for OpenMP support due to using XCode compiler.")
-
-boost_version_source = get_expression_value(['<boost/version.hpp>'], 'BOOST_LIB_VERSION')
-retcode, boost_lib_version = conf.TryRun(boost_version_source, '.cpp')
-env['BOOST_LIB_VERSION'] = '.'.join(boost_lib_version.strip().split('_'))
-if not env['BOOST_LIB_VERSION']:
-    config_error("Boost could not be found. Install Boost headers or set"
-                 " 'boost_inc_dir' to point to the boost headers.")
-else:
-    print('INFO: Found Boost version {0}'.format(env['BOOST_LIB_VERSION']))
 # demangle is available in Boost 1.56 or newer
 env['has_demangle'] = conf.CheckDeclaration("boost::core::demangle",
                                 '#include <boost/core/demangle.hpp>', 'C++')
@@ -1317,25 +1272,9 @@ env['LIBM'] = ['m'] if env['NEED_LIBM'] else []
 if env['system_sundials'] == 'y':
     for subdir in ('sundials', 'nvector', 'cvodes', 'ida', 'sunlinsol', 'sunmatrix'):
         remove_directory('include/cantera/ext/' + subdir)
-
-    # Determine Sundials version
-    sundials_version_source = get_expression_value(['"sundials/sundials_config.h"'],
-                                                   'QUOTE(SUNDIALS_PACKAGE_VERSION)')
-    retcode, sundials_version = conf.TryRun(sundials_version_source, '.cpp')
-    if retcode == 0:
-        config_error("Failed to determine Sundials version.")
-    sundials_version = sundials_version.strip(' "\n')
-
-    # Ignore the minor version, for example 2.4.x -> 2.4
-    env['sundials_version'] = '.'.join(sundials_version.split('.')[:2])
+    env['sundials_version'] = "5.7"
     sundials_ver = parse_version(env['sundials_version'])
-    if sundials_ver < parse_version("2.4") or sundials_ver >= parse_version("7.0"):
-        print("""ERROR: Sundials version %r is not supported.""" % env['sundials_version'])
-        sys.exit(1)
-    elif sundials_ver > parse_version("6.0"):
-        print("WARNING: Sundials version %r has not been tested." % env['sundials_version'])
-
-    print("""INFO: Using system installation of Sundials version %s.""" % sundials_version)
+    print("""INFO: Using system installation of Sundials version %s.""" % sundials_ver)
 
     # Determine whether or not Sundials was built with BLAS/LAPACK
     if sundials_ver < parse_version('2.6'):
-- 
2.36.0

