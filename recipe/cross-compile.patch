From 124c5d8ab14b0ca8dc88c7a4b418acf97616e975 Mon Sep 17 00:00:00 2001
From: Bryan Weber <bryan.w.weber@gmail.com>
Date: Fri, 21 Jun 2024 20:29:31 -0400
Subject: [PATCH 1/3] Enable cross-compiling support for v3.0.1

Cross compiling support is only available without TryRun
---
 SConstruct | 127 ++---------------------------------------------------
 1 file changed, 4 insertions(+), 123 deletions(-)

diff --git a/SConstruct b/SConstruct
index 5944adcfc..0b81e31b7 100644
--- a/SConstruct
+++ b/SConstruct
@@ -1163,52 +1163,11 @@ def get_expression_value(includes, expression, defines=()):
               '}\n'))
     return '\n'.join(s)
 
-# Check that libraries link correctly
-cmath_check_source = get_expression_value(["<cmath>"], "cos(0. * argc)")
-retcode, cmath_works = conf.TryRun(cmath_check_source, ".cpp")
-if cmath_works.strip() != "1":
-    config_error(
-        "The C++ compiler is not correctly configured (failed at linking stage)."
-    )
-
-# Check that NaN is treated correctly
-nan_check_source = get_expression_value(["<cmath>"], "std::isnan(NAN + argc)")
-retcode, nan_works = conf.TryRun(nan_check_source, ".cpp")
-if nan_works.strip() != "1":
-    config_error(
-        "Cantera requires a working implementation of 'std::isnan'.\n"
-        "If you have specified '-ffast-math' or equivalent as an optimization option,\n"
-        "either remove this option or add the '-fno-finite-math-only option'."
-    )
-
-def split_version(version):
-    """Split integer version into version string."""
-    version = divmod(float(version.strip()), 10000)
-    (fmt_maj, (fmt_min, fmt_pat)) = version[0], divmod(version[1], 100)
-    return f"{fmt_maj:.0f}.{fmt_min:.0f}.{fmt_pat:.0f}"
-
 # Check for fmt library and checkout submodule if needed
 if env['system_fmt'] in ('y', 'default'):
-    fmt_version_source = get_expression_value(
-        ['<fmt/format.h>'], 'FMT_VERSION', ['FMT_HEADER_ONLY'])
-    retcode, fmt_lib_version = conf.TryRun(fmt_version_source, '.cpp')
-    if retcode:
-        fmt_lib_version = split_version(fmt_lib_version)
-        fmt_min_version = "6.1.2"
-        if parse_version(fmt_lib_version) < parse_version(fmt_min_version):
-            if env['system_fmt'] == 'y':
-                config_error(
-                    f"System fmt version {fmt_lib_version} is not supported;"
-                    f"version {fmt_min_version} or higher is required.")
-                logger.info(
-                    f"System fmt version {fmt_lib_version} is not supported; "
-                    "using private installation instead.")
-        else:
-            env['system_fmt'] = True
-            logger.info(f"Using system installation of fmt library.")
-    elif env['system_fmt'] == 'y':
-        config_error('Expected system installation of fmt library, but it '
-            'could not be found.')
+    if conf.CheckCXXHeader('fmt/ostream.h', '""'):
+        env['system_fmt'] = True
+        logger.info("Using system installation of fmt library.")
 
 if env['system_fmt'] in ('n', 'default'):
     if not os.path.exists('ext/fmt/include/fmt/ostream.h'):
@@ -1225,23 +1184,6 @@ if env['system_fmt'] in ('n', 'default'):
                          'Try manually checking out the submodule with:\n\n'
                          '    git submodule update --init --recursive ext/fmt\n')
 
-    fmt_version_source = get_expression_value(
-        ['"../ext/fmt/include/fmt/format.h"'], 'FMT_VERSION', ['FMT_HEADER_ONLY'])
-    retcode, fmt_lib_version = conf.TryRun(fmt_version_source, '.cpp')
-    if not retcode:
-        config_error('Expected private installation of fmt library, but it is '
-            'not configured correctly.')
-
-    fmt_lib_version = split_version(fmt_lib_version)
-    env['system_fmt'] = False
-    logger.info(f"Using private installation of fmt library.")
-
-if env["OS"] == "Windows" and parse_version(fmt_lib_version) < parse_version("8.0.0"):
-    # Workaround for symbols not exported on Windows in older fmt versions
-    env.Append(CPPDEFINES={"FMT_HEADER_ONLY": 1})
-
-logger.info(f"Using fmt version {fmt_lib_version}")
-
 # Check for yaml-cpp library and checkout submodule if needed
 if env['system_yamlcpp'] in ('y', 'default'):
     # We need the Mark() function, which was added in version 0.5.3
@@ -1337,12 +1279,6 @@ if env["system_eigen"] in ("n", "default"):
                          "    git submodule update --init --recursive ext/eigen\n")
     eigen_include = '"../ext/eigen/Eigen/Core"'
 
-eigen_versions = 'QUOTE(EIGEN_WORLD_VERSION) "." QUOTE(EIGEN_MAJOR_VERSION) "." QUOTE(EIGEN_MINOR_VERSION)'
-eigen_version_source = get_expression_value([eigen_include], eigen_versions)
-retcode, eigen_lib_version = conf.TryRun(eigen_version_source, ".cpp")
-env["EIGEN_LIB_VERSION"] = eigen_lib_version.strip()
-logger.info(f"Found Eigen version {env['EIGEN_LIB_VERSION']}")
-
 # Determine which standard library to link to when using Fortran to
 # compile code that links to Cantera
 if conf.CheckDeclaration('__GLIBCXX__', '#include <iostream>', 'C++'):
@@ -1365,19 +1301,6 @@ else:
     env["HAS_OPENMP"] = False
     logger.info("Not checking for OpenMP support due to using XCode compiler.")
 
-boost_version_source = get_expression_value(['<boost/version.hpp>'], 'BOOST_LIB_VERSION')
-retcode, boost_lib_version = conf.TryRun(boost_version_source, '.cpp')
-env['BOOST_LIB_VERSION'] = '.'.join(boost_lib_version.strip().split('_'))
-if not env['BOOST_LIB_VERSION']:
-    config_error("Boost could not be found. Install Boost headers or set"
-                 " 'boost_inc_dir' to point to the boost headers.")
-else:
-    logger.info(f"Found Boost version {env['BOOST_LIB_VERSION']}")
-if parse_version(env['BOOST_LIB_VERSION']) < parse_version("1.70"):
-    # Boost.DLL with std::filesystem (making it header-only) is available in Boost 1.70
-    # or newer
-    config_error("Cantera requires Boost version 1.70 or newer.")
-
 # check BLAS/LAPACK installations
 if env["system_blas_lapack"] == "n":
     env["blas_lapack_libs"] = []
@@ -1418,32 +1341,6 @@ elif env["system_blas_lapack"] == "default":
     if not env["blas_lapack_libs"] and env["OS"] != "Darwin":
         logger.info("No system BLAS/LAPACK libraries detected.")
 
-if "mkl_rt" in env["blas_lapack_libs"]:
-    mkl_version = textwrap.dedent("""\
-        #include <iostream>
-        #include "mkl.h"
-        int main(int argc, char** argv) {
-            MKLVersion Version;
-            mkl_get_version(&Version);
-            std::cout << Version.MajorVersion << "." << Version.MinorVersion << "."
-                << Version.UpdateVersion << " for " << Version.Platform;
-            return 0;
-        }
-    """)
-    retcode, mkl_version = conf.TryRun(mkl_version, ".cpp")
-    if retcode:
-        logger.info(f"Using MKL {mkl_version}")
-    else:
-        logger.warning("Failed to determine MKL version.")
-
-elif "openblas" in env["blas_lapack_libs"]:
-    openblas_version_source = get_expression_value(["<openblas_config.h>"], "OPENBLAS_VERSION")
-    retcode, openblas_version = conf.TryRun(openblas_version_source, ".cpp")
-    if retcode:
-        logger.info(f"Using {openblas_version.strip()}")
-    else:
-        logger.warning("Failed to determine OpenBLAS version.")
-
 import SCons.Conftest, SCons.SConf
 context = SCons.SConf.CheckContext(conf)
 
@@ -1500,24 +1397,8 @@ if env['system_sundials'] == 'y':
                    'sunnonlinsol'):
         remove_directory('include/cantera/ext/' + subdir)
 
-    # Determine Sundials version
-    sundials_version_source = get_expression_value(['"sundials/sundials_config.h"'],
-                                                   'QUOTE(SUNDIALS_VERSION)')
-    retcode, sundials_version = conf.TryRun(sundials_version_source, '.cpp')
-    if retcode == 0:
-        config_error("Failed to determine Sundials version.")
-    sundials_version = sundials_version.strip(' "\n')
-
-    # Ignore the minor version, for example 2.4.x -> 2.4
-    env['sundials_version'] = '.'.join(sundials_version.split('.')[:2])
+    env['sundials_version'] = "7.0"
     sundials_ver = parse_version(env['sundials_version'])
-    if sundials_ver < parse_version("3.0") or sundials_ver >= parse_version("8.0"):
-        logger.error(f"Sundials version {env['sundials_version']!r} is not supported.")
-        sys.exit(1)
-    elif sundials_ver > parse_version("7.0.0"):
-        logger.warning(f"Sundials version {env['sundials_version']!r} has not been tested.")
-
-    logger.info(f"Using system installation of Sundials version {sundials_version!r}.")
 
     # Determine whether or not Sundials was built with BLAS/LAPACK
     if sundials_ver < parse_version('5.5'):
-- 
2.45.2

